#!/bin/bash

# =============================================================================
# Script de Configuraci√≥n PTZ Camera - Jetson Orin Nano
# Autor: Configuraci√≥n para c√°mara PTZ con conexi√≥n Ethernet directa
# Uso: ./ptz_startup.sh
# =============================================================================

echo "==============================================="
echo "üé• CONFIGURACI√ìN C√ÅMARA PTZ - JETSON ORIN NANO"
echo "==============================================="
echo ""

# Configuraci√≥n de variables
INTERFACE="enP8p1s0"
JETSON_IP="192.168.1.100"
CAMERA_IP="192.168.1.101"
RTSP_URL="rtsp://admin:admin@${CAMERA_IP}/cam/realmonitor?channel=1&subtype=1"

# Funci√≥n para verificar si el comando fue exitoso
check_command() {
    if [ $? -eq 0 ]; then
        echo "‚úÖ $1"
    else
        echo "‚ùå Error en: $1"
        exit 1
    fi
}

# Funci√≥n para mostrar progreso
show_progress() {
    echo "üîÑ $1..."
}

echo "üìã Configuraci√≥n:"
echo "   - Interfaz: $INTERFACE"
echo "   - IP Jetson: $JETSON_IP"
echo "   - IP C√°mara: $CAMERA_IP"
echo ""

# ==========================================
# 1. CONFIGURACI√ìN DE RED
# ==========================================
show_progress "Configurando interfaz de red"

# Limpiar configuraci√≥n previa
sudo ip addr flush dev $INTERFACE
check_command "Limpieza de configuraci√≥n de red"

# Asignar IP a la Jetson
sudo ip addr add ${JETSON_IP}/24 dev $INTERFACE
check_command "Asignaci√≥n de IP ${JETSON_IP}"

# Configurar par√°metros del enlace Ethernet
sudo ethtool -s $INTERFACE speed 100 duplex full autoneg off 2>/dev/null
if [ $? -eq 0 ]; then
    echo "‚úÖ Configuraci√≥n Ethernet optimizada"
else
    echo "‚ö†Ô∏è  Advertencia: No se pudo optimizar configuraci√≥n Ethernet (contin√∫a normalmente)"
fi

# Verificar que la interfaz est√© activa
ip addr show $INTERFACE | grep -q $JETSON_IP
check_command "Verificaci√≥n de configuraci√≥n de red"

echo ""

# ==========================================
# 2. VERIFICACI√ìN DE CONECTIVIDAD
# ==========================================
show_progress "Verificando conectividad con la c√°mara"

# Esperar un momento para que la red se estabilice
sleep 3

# Buscar la c√°mara en la red
echo "üì° Escaneando red local..."
CAMERA_FOUND=$(sudo arp-scan --interface=$INTERFACE --localnet 2>/dev/null | grep "$CAMERA_IP")

if [ -n "$CAMERA_FOUND" ]; then
    echo "‚úÖ C√°mara encontrada:"
    echo "   $CAMERA_FOUND"
else
    echo "‚ùå C√°mara no encontrada en $CAMERA_IP"
    echo ""
    echo "üîß Intentos de soluci√≥n:"
    echo "   1. Verificar cable Ethernet"
    echo "   2. Verificar que la c√°mara est√© encendida"
    echo "   3. Esperar 30 segundos para que la c√°mara inicie completamente"
    echo ""
    read -p "¬øContinuar de todas formas? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Verificar conectividad b√°sica
echo "üèì Probando conectividad..."
if ping -c 2 -W 3 $CAMERA_IP > /dev/null 2>&1; then
    echo "‚úÖ Ping exitoso a $CAMERA_IP"
else
    echo "‚ö†Ô∏è  Sin respuesta al ping (puede ser normal si la c√°mara bloquea ICMP)"
fi

echo ""

# ==========================================
# 3. VERIFICACI√ìN DE SERVICIOS
# ==========================================
show_progress "Verificando servicios de la c√°mara"

# Verificar puertos de la c√°mara
echo "üîç Escaneando puertos de la c√°mara..."
if command -v nmap > /dev/null 2>&1; then
    PORTS=$(nmap -sS --open -p 80,554,8899 $CAMERA_IP 2>/dev/null | grep "open")
    if [ -n "$PORTS" ]; then
        echo "‚úÖ Puertos encontrados:"
        echo "$PORTS" | sed 's/^/   /'
    else
        echo "‚ö†Ô∏è  No se detectaron puertos abiertos"
    fi
else
    echo "‚ö†Ô∏è  nmap no instalado - saltando verificaci√≥n de puertos"
fi

# Probar stream RTSP
echo "üìπ Verificando stream RTSP..."
if command -v ffprobe > /dev/null 2>&1; then
    STREAM_INFO=$(timeout 10 ffprobe -v quiet -show_entries stream=codec_type,codec_name -of csv=p=0 "$RTSP_URL" 2>/dev/null)
    if [ -n "$STREAM_INFO" ]; then
        echo "‚úÖ Stream RTSP disponible:"
        echo "$STREAM_INFO" | sed 's/^/   /'
    else
        echo "‚ö†Ô∏è  No se pudo verificar el stream RTSP"
    fi
else
    echo "‚ö†Ô∏è  ffprobe no disponible - saltando verificaci√≥n de stream"
fi

echo ""

# ==========================================
# 4. INICIO DEL STREAM
# ==========================================
show_progress "Iniciando visualizaci√≥n del stream"

echo "üé¨ Configuraci√≥n del stream:"
echo "   - URL: $RTSP_URL"
echo "   - Calidad: Baja (subtype=1) para m√≠nima latencia"
echo "   - Audio: Deshabilitado"
echo "   - Latencia: ~0 segundos"
echo ""

# Verificar que GStreamer est√© disponible
if ! command -v gst-launch-1.0 > /dev/null 2>&1; then
    echo "‚ùå GStreamer no est√° instalado"
    echo "üí° Instalar con: sudo apt install gstreamer1.0-tools gstreamer1.0-plugins-good gstreamer1.0-plugins-bad"
    echo ""
    echo "üîÑ Intentando con ffplay como alternativa..."
    
    if command -v ffplay > /dev/null 2>&1; then
        echo "‚úÖ Usando ffplay..."
        ffplay -fflags nobuffer -flags low_delay -framedrop -rtsp_transport udp -an "$RTSP_URL"
    else
        echo "‚ùå Ni GStreamer ni ffplay est√°n disponibles"
        exit 1
    fi
else
    echo "‚úÖ Iniciando GStreamer..."
    echo "üí° Presiona Ctrl+C para detener"
    echo ""
    
    # Comando GStreamer optimizado
    gst-launch-1.0 rtspsrc location="$RTSP_URL" latency=0 ! rtph264depay ! h264parse ! avdec_h264 ! videoconvert ! autovideosink sync=false
fi

echo ""
echo "==============================================="
echo "üèÅ FIN DEL SCRIPT"
echo "==============================================="